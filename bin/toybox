#!/bin/sh

project_name=toybox
version=0.1.0

function applicationlist() {
  cat <<-EOF
available applications are below:

    proxy                 Http proxy server based on nginx 
    wordpress             CMS 
    owncloud              Personal cloud strage like a Dropbox

EOF
}

function _usage() {
  cat <<-EOF
Usage: ${project_name} [-vh] [-d domain] [-s subdomain] [<application>] [<command>]

option:
    -d domain       Assigning specific sub domain name
    -s subdomain    Assigning specific sub domain name
    -v              Show the version of ${project_name}
    -h              Show this message

application:
    proxy           Http proxy server based on nginx 
    wordpress       CMS 
    owncloud        Personal cloud strage like a Dropbox

command:
    init            Create docker-compose.yml and data directory
    start           Start ${app_name} containers
    stop            Stop ${app_name} containers
    status          Show ${app_name} containers status
    clear           Stop and Remove all of ${app_name} containers
    backup          Backup DB data
    source          get source code of containers

    env                   Show the environment variables
    version               Show the version of ${app_name}
    help                  Show this message

EOF
}

function _is_executable() {
    local command="$1"
    type "$command" > /dev/null 2>&1
}

function _version() { 
    echo $version 
}

function _help() { 
    #applicationlist
    _usage 
}

function _env() {
    echo "TOYBOX_HOME: $TOYBOX_HOME"
    echo "TOYBOX_DOMAIN: $TOYBOX_DOMAIN"
}

function _list() {
    echo 'proxy:'
    proxy=$(docker ps | grep toybox_ | grep proxy)
    if [ 0 -eq $? ]; then
        echo '  running!'
    else
        echo '  not running'
    fi
    echo ''
    
    echo 'WordPress:'
    wp_url=$(docker ps | \
        grep -o "toybox_.*\..*\..*-wordpress_" | \
        sed -e "s/toybox_//g" | \
        sed -e "s/-wordpress_//g")
    echo ${wp_url}
    echo ''
    
    echo 'OwnCloud:'
}

function _stop() {
    cd ${app_path}/bin
    docker-compose -p ${project_name} stop
}

function _rm() {
    cd ${app_path}/bin
    docker-compose -p ${project_name} rm
}

function _status() {
    _init
    cd ${app_path}/bin
    docker-compose -p ${project_name} ps
}

function _clear() {
    _backup
    _stop
    echo '---------------------------------'
    cd ${app_path}/bin
    docker-compose -p ${project_name} rm
}


# check components
_is_executable docker || {
    cat <<EOF
"docker" couldn't be found. Please install or set \$PATH.
See: https://docs.docker.com/installation/#installation
EOF
    exit 1
  }

_is_executable docker-compose || {
    cat <<EOF
"docker-compose" couldn't be found. Please install or set \$PATH.
See: https://docs.docker.com/compose/install/
EOF
    exit 1
  }

# check options
while getopts vhs:d: OPT
do
  case $OPT in
    "v" ) _version ; exit 0 ;;
    "h" ) _help ; exit 0 ;;
    "s" ) sub_domain="${OPTARG}" ;;
    "d" ) domain="${OPTARG}" ;;
  esac
done
shift $(expr $OPTIND - 1)

# check arguments
if [ $1 = "help" -o $1 = "version" -o $1 = "env" -o $1 = 'list' ]; then
    _$1
    exit 0
fi

# check $TOYBOX_HOME
if [ -z "$TOYBOX_HOME" ] ; then
    cat <<EOF
"TOYBOX_HOME" is not set. 
Please set it for your absolute path of the docker-toybox installed directory
e.g. export TOYBOX_HOME=/home/nobita/workspace/docker-toybox
EOF
    exit 1
fi

# main routine
if [ $# -ne 2 ]; then
  _usage
  exit 1
else
    app_name=$1; shift

    # set FQDN
    if [ "${domain}" = '' ]; then
        if [ -z "$TOYBOX_DOMAIN" ] ; then
            domain=docker-toybox.com
        else
            domain=$TOYBOX_DOMAIN
        fi
    fi
    if [ "${sub_domain}" = '' ]; then
        sub_domain=${app_name}
    fi
    url=${sub_domain}.${domain}

    # set variables
    #home_path=$(cd $(dirname $0);pwd)
    #home_path=$TOYBOX_HOME
    app_path=$TOYBOX_HOME/stack/${app_name}/${domain}/${sub_domain}
    out=${app_path}/bin/docker-compose.yml
    #src=${app_path}/../../src/${app_name}
    src=${app_path}/src
    
    # Load module
    if [ -e $TOYBOX_HOME/lib/${app_name}.fnc ]; then
        . $TOYBOX_HOME/lib/${app_name}.fnc
        mkdir -p ${app_path}
    else
        echo "${project_name}: no such application \"${app_name}\""
        applicationlist
        exit 1
    fi
    
    # Exec Command
    command=$1
    if _is_executable "_${command}" ; then
        _${command} $@
    else
        echo "${project_name}: no such command \"${command}\""
        _usage
        exit 1
    fi
fi

exit 0
