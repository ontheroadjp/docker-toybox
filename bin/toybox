#!/bin/sh

. $TOYBOX_HOME/core/usage.fnc
. $TOYBOX_HOME/core/list.fnc
. $TOYBOX_HOME/core/dockerinfo.fnc

# ----------------------------------------
# Global variables
# ----------------------------------------

project_name="toybox"
version="0.1.0"

applist="$TOYBOX_HOME/stack/applications.txt"

fqdn=""
port=""
applist_grep_key=""
app_name=""
app_path=""
compose_file=""
src=""

timezone=$(date +%Z)

# ----------------------------------------
# Private Functions
# ----------------------------------------

function _env() {
    echo "TOYBOX_HOME: $TOYBOX_HOME"
    echo "TOYBOX_DOMAIN: $TOYBOX_DOMAIN"
    #echo "TOYBOX_LETSENCRYPT_HOST: $TOYBOX_LETSENCRYPT_HOST"
    #echo "TOYBOX_LETSENCRYPT_EMAIL: $TOYBOX_LETSENCRYPT_EMAIL"
}

function _version() { 
    echo ${version} 
}

function _help() { 
    __usage 
}

# ----------------------------------------
# Utilities
# ----------------------------------------

function __is_set_env() {
    env | grep $1 > /dev/null 2>&1;
}

function __is_executable() {
    local command="$1"
    type "${command}" > /dev/null 2>&1
}

function __is_exist_in_applist() {
    cat ${applist} | grep ${applist_grep_key} > /dev/null 2>&1
}

function __is_container_exist() {
    #$1 = ${app_name}
    docker ps -a | grep ${project_name}_${1}_ > /dev/null 2>&1
}

function __is_container_running() {
    #$1 = ${app_name}
    docker ps -a | grep ${project_name}_${1}_ | grep Up > /dev/null 2>&1
}

# ----------------------------------------
# Command
# ----------------------------------------

function _new() {
    local exist=''
    if [ -f ${applist} ]; then
        if __is_exist_in_applist && [ ${app_name} = "proxy" ]; then
            echo "${project_name}: 'proxy #${port}' is already used."
            exit 1
        elif __is_exist_in_applist; then
            echo "${project_name}: 'http://${fqdn}' is already used."
            echo "Please try to 'new' command again with -d or -s option."
            exit 1
        fi
    else
        touch ${applist}
    fi

    __init && {
        cd ${app_path}/bin
        docker-compose -p ${project_name} up -d && {
            echo "---------------------------------"
            echo "URL: http://${fqdn}"
            echo "---------------------------------"

            if [ ${app_name} = 'proxy' ]; then
                new="${port} ${app_name} running #${port}"
            else
                new="${fqdn} ${app_name} running ${app_path}"
            fi
            echo ${new} >> ${applist}

            if [ ${app_name} = 'wpclone' ]; then
                __after_start
            fi
        }
    }
}

function _start() {
    if [ ${app_name} = "proxy" ]; then
        __new

    elif [ ! -f ${applist} ]; then
        echo "${project_name}: 'http://${fqdn}' does not exist."
        echo "Please try to 'new' command to create '${fqdn}'"
        exit 1

    elif ! __is_exist_in_applist; then
        echo "${project_name}: 'http://${fqdn}' does not exist."
        echo "Please try to 'new' command to create '${fqdn}'"
        exit 1
    else
        cd ${app_path}/bin

        # when container removed
        if ! __is_container_exist ${fqdn}-${app_name}; then
            __init && {
                docker-compose -p ${project_name} up -d && {
                    local old=$(cat ${applist} | grep ${fqdn})
                    local new=$(cat ${applist} | grep ${fqdn} | sed -e "s:removed:running:")
                    sed -i -e "s:${old}:${new}:" ${applist}
                }
            }

        # when container running
        elif __is_container_running ${fqdn}-${app_name}; then
            echo ${project_name}: "'http://${fqdn}' is already running"
            exit 1

        # when container stopped
        else
            __init && {
                docker-compose -p ${project_name} start && {
                    local old=$(cat ${applist} | grep ${fqdn})
                    local new=$(cat ${applist} | grep ${fqdn} | sed -e "s:stopped:running:")
                    sed -i -e "s:${old}:${new}:" ${applist}
                }
            }
        fi
    fi
}

function _stop() {
   cd ${app_path}/bin
   docker-compose -p ${project_name} stop && {
       if [ -f ${applist} ]; then
           local old=$(cat ${applist} | grep ${applist_grep_key})
           local new=$(cat ${applist} | grep ${applist_grep_key} | sed -e "s:running:stopped:")
           sed -i -e "s:${old}:${new}:" ${applist}
       else
           echo "error@_stop() in toybox"
       fi
   }
}

function _rm() {
    if __is_container_running ${fqdn}-${app_name}; then
        echo ${project_name}: "'http://${fqdn}' is running now."
        echo "Please stop it first.( toybox http://${fqdn} stop )"
        exit 1
    fi

    cd ${app_path}/bin
    echo y | docker-compose -p ${project_name} rm && {
        if [ -f ${applist} ]; then
            old=$(cat ${applist} | grep ${fqdn})
            new=$(cat ${applist} | grep ${fqdn} | sed -e "s:stopped:removed:")
            sed -i -e "s:${old}:${new}:" ${applist}
            #sed -i -e "/${fqdn}/d" ${applist}
        else
            echo "error@_rm() in toybox"
        fi
    }
}

function _restart() {
    _stop && {
        _rm && {
            _start
        }
    }
}

function _clear() {
    if __is_container_running ${fqdn}-${app_name}; then
        echo ${project_name}: "'http://${fqdn}' is running now."
        echo "Please stop and remove it first.( toybox http://${fqdn} stop )"
        exit 1
    fi
    if __is_container_exist ${fqdn}-${app_name}; then
        echo ${project_name}: "'http://${fqdn}' is existing now."
        echo "Please remove t first.( toybox http://${fqdn} rm )"
        exit 1
    fi

    sed -i -e "/${fqdn}/d" ${applist}
    sudo rm -rf ${app_path}
}

function _logs() {
    cd ${app_path}/bin
    docker-compose -p ${project_name} logs
}

function _ps() {
    cd ${app_path}/bin
    docker-compose -p ${project_name} ps
}

function _ip() {
    for container in ${containers[@]}; do
        __is_container_exist ${container}; local exist=$(( ${exist} + $? ))
        __is_container_running ${container}; local running=$(( ${running} + $? ))
        if [ ${exist} -eq 0 ] && [ ${running} -eq 0 ]; then
            echo -n "${container}: "
            docker inspect -f '{{ .NetworkSettings.IPAddress }}' \
                $(docker ps | grep ${container}_1 | awk '{print $1}')
        else
            echo -n "${container}(not running)"
        fi
    done
}

# ----------------------------------------
# Main Function
# ----------------------------------------

function __docker_toybox() {
    # Load application module
    if [ -e $TOYBOX_HOME/lib/${app_name}.fnc ]; then
        . $TOYBOX_HOME/lib/${app_name}.fnc
        mkdir -p ${app_path}
    else
        echo "${project_name}: No such application as '${app_name}'"
        exit 1
    fi
    
    # Exec Command
    local command=$1
    if __is_executable "_${command}" ; then
        _${command} $@
    else
        echo "${project_name}: '${command}' is not a ${project_name} command." 
        echo "See '${project_name} -h'." 
        exit 1
    fi
}

# ----------------------------------------
# Main Routine
# ----------------------------------------

# check components
__is_executable docker || {
    cat <<EOF
toybox: "docker" command is required.
See: https://docs.docker.com/installation/#installation
EOF
    exit 1
  }

__is_executable docker-compose || {
    cat <<EOF
toybox: "docker-compose" command is required.
See: https://docs.docker.com/compose/install/
EOF
    exit 1
  }

__is_set_env TOYBOX_HOME || {
    cat <<EOF
toybox: enviroment variable "TOYBOX_HOME" is not set. 
Please set it for your absolute path of the docker-toybox installed directory
e.g. export TOYBOX_HOME=/home/nobita/workspace/docker-toybox
EOF
    exit 1
}

# check options
while getopts s:d: OPT
do
  case $OPT in
    "s" ) sub_domain="${OPTARG}" ;;
    "d" ) domain="${OPTARG}" ;;
  esac
done
shift $(expr $OPTIND - 1)

# check arguments
if [ $# -eq 0 ]; then
    __list

elif [ $# -eq 1 ]; then
    if [ $1 = "reset" ]; then
        echo "Are you sure you want to reset all of containers related ${project_name}?(y/n)"
        read answer
        if [ ${answer} = "y" ]; then
            echo -n 'docker stop...'
            docker stop $(docker ps | grep ${project_name} | awk '{print $1}') > /dev/null 2>&1
            echo 'done.'
            echo -n 'docker rm...'
            docker rm $(docker ps -a | grep ${project_name} | awk '{print $1}') > /dev/null 2>&1
            echo 'done.'
            echo -n 'remove stack directory...'
            sudo rm -rf $TOYBOX_HOME/stack && {
                echo 'done.'
            }
        fi
    elif __is_executable "_$1" ; then
        _$1
    else
        echo "${project_name}: Invalid argument(s)."
        exit 1;
    fi

elif [ $# -eq 2 ]; then

    arg=$1; shift
    
    # ----------------------------------------
    # set variables: URL form
    # ----------------------------------------
    if [[ ${arg} =~ ^http://.* ]]; then
        
        fqdn=$(echo ${arg} | sed "s?http://??")
        applist_grep_key=${fqdn}
    
        if [ ! -f ${applist} ]; then
            echo "${project_name}: No application available."
            echo "Please create application first."
            exit 1
        fi
    
        app_name="$(cat ${applist} | grep ${fqdn} | awk '{print $2}')"
        app_path="$(cat ${applist} | grep ${fqdn} | awk '{print $4}')"
        compose_file="${app_path}/bin/docker-compose.yml"
        src="$TOYBOX_HOME/src/${app_name}"
        
        if [ ! -n "${app_name}" ] && [ ! -n "${app_path}" ]; then
            echo "${project_name}: 'http://${fqdn}' may be invalid URL."
            exit 1
        fi
    
    # ----------------------------------------
    # set variables: Generic Form
    # ----------------------------------------
    elif [ ${arg} = "proxy" ]; then
        port=80
        applist_grep_key=${port}

        app_name=${arg}
        app_path="$TOYBOX_HOME/stack/${app_name}/${port}"
        compose_file="${app_path}/bin/docker-compose.yml"
        src="$TOYBOX_HOME/src/${app_name}"
    else
        app_name=$(echo ${arg} | cut -d":" -f1)
        app_version=$(echo ${arg} | cut -d":" -f2)

        if [ ! -f $TOYBOX_HOME/lib/${app_name}.fnc ]; then
            echo "${project_name}: Invalid argument(s)."
            exit 1;
        fi
    
        # set FQDN
        if [ "${domain}" = '' ]; then
            if [ -z "$TOYBOX_DOMAIN" ] ; then
                domain=docker-toybox.com
            else
                domain=$TOYBOX_DOMAIN
            fi
        fi
        if [ "${sub_domain}" = '' ]; then
            sub_domain=${app_name}
        fi
    
        fqdn="${sub_domain}.${domain}"
        applist_grep_key=${fqdn}

        app_path="$TOYBOX_HOME/stack/${app_name}/${sub_domain}.${domain}"
        compose_file="${app_path}/bin/docker-compose.yml"
        src="$TOYBOX_HOME/src/${app_name}"
       
        if [ $1 != "new" ]; then
            echo ${project_name}": Invalid argument(s)."
            echo "See '${project_name} -h'." 
            exit 1
        fi
    fi

    # ----------------------------------------
    # Exec main command
    # ----------------------------------------
    __docker_toybox $@
else
    echo "${project_name}: Invalid argument(s)."
    exit 1;
fi

exit 0
