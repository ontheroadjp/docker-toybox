#!/bin/sh

# ----------------------------------------
# Global variables
# ----------------------------------------

project_name="toybox"
version="0.1.0"

applist="$TOYBOX_HOME/stack/applications.txt"
compose_file=""
fqdn=""
app_name=""
app_path=""
src=""

# ----------------------------------------
# Private Functions
# ----------------------------------------

function __usage() {
  cat <<-EOF
Usage: 
    ${project_name} 
    ${project_name} [-s|-d] <application> new
    ${project_name} [URL] <command>
    ${project_name} [-e|-v|-h]

option:
    -d              Assigning specific sub domain name
    -s              Assigning specific sub domain name
    -e              Show the environment variables
    -v              Show the version of ${project_name}
    -h              Show this message

application:
    proxy           Http dinamic proxy server based on nginx 
    php5            LAMP(Apache2 + MySQL5.6 + PHP5.6)
    php7            LAMP(Apache2 + MySQL5.6 + PHP7.0)
    wordpress       CMS 
    owncloud        Personal cloud strage like a Dropbox
    lychee          Photo management system

command:
    start           Start ${app_name} containers
    stop            Stop ${app_name} containers
    ps              Show ${app_name} containers status
    restart         Show ${app_name} containers status
    clear           Stop and Remove all of ${app_name} containers
    # backup          Backup DB data
    #source          get source code of containers

EOF
}

function __env() {
    echo "TOYBOX_HOME: $TOYBOX_HOME"
    echo "TOYBOX_DOMAIN: $TOYBOX_DOMAIN"
}

function __version() { 
    echo ${version} 
}

function __help() { 
    __usage 
}

function __is_executable() {
    local command="$1"
    type "${command}" > /dev/null 2>&1
}

function __is_container_exist() {
    #$1 = ${app_name}
    docker ps -a | grep ${project_name}_${1}_ > /dev/null 2>&1;
}

function __is_container_running() {
    #$1 = ${app_name}
    docker ps -a | grep ${project_name}_${1}_ | grep Up > /dev/null 2>&1;
}

function __list() {
    if [ -f ${applist} ]; then
        cat ${applist} | awk 'BEGIN{ OFS=" " }
            function red(s) { printf "\033[1;31m%s\033[0m",s }
            function green(s) { printf "\033[1;32m%s\033[0m",s }
            function blue(s) { printf "\033[1;34m%s\033[0m",s }
            function app(s) { printf "%-15s",s }
            function status(s) { 
                if(s == "running")
                    printf "\033[1;32m%s\033[0m",s
                else if(s == "stopped")
                    printf "\033[1;31m%s\033[0m",s
                else
                    printf "%s",s
            }
            { printf "%2s",NR } { printf ": http://%-35s",$1 }
            { app($2) }
            { status($3) }
            { printf "\n" }'
    else
        echo 'no application available.'
    fi
}

function __print_header() {
    echo ''
    echo '  _____         ___          '
    echo ' |_   _|__ _  _| _ ) _____ __'
    echo '   | |/ _ \ || | _ \/ _ \ \ /'
    echo '   |_|\___/\_, |___/\___/_\_\'
    echo '           |__/  Nuts Project'
    echo ''
}

function __monitor() {

    __print_header

    #echo '<Expect>'
    #__list

    echo '<Exact(ps)>'
    if [ ! -f ${applist} ]; then
        echo 'no application available.'
    else
        local count=0
        cat ${applist} | while read line; do
            count=$(expr ${count} + 1)
            printf "%2s: " ${count}

            fqdn=$(echo ${line} | awk '{print $1}')
            app_name=$(echo ${line} | awk '{print $2}')
            app_path=$(echo ${line} | awk '{print $5}')

            if [ ${app_name} = 'proxy' ]; then
                printf "%-42s" "n/a" # URL
                printf "%-15s" ${app_name}:${app_version}
                __is_container_exist ${app_name}; local exist_main=$?
                local exist_docker_gen=$?
                local result=$(expr ${exist_main} + ${exist_docker_gen})

                # for one container
                if [ ${result} -eq 2 ]; then
                    printf "%-10s" "removed"
                elif [ ${result} -eq 1 ]; then
                    printf "\033[1;31m%-10s\033[0m" "error"

                # for two containers
                #elif [ ${result} -eq 0 ]; then
                #    if __is_main_container_running && __is_docker_gen_container_running; then
                #        printf "\033[1;32m%-10s\033[0m" "running"
                #    elif ! __is_main_container_running && __is_docker_gen_container_running; then
                #        printf "%-10s" "error: nginx container is down"
                #    elif __is_main_container_running && ! __is_docker_gen_container_running; then
                #        printf "%-10s" "error: docker-gen container is down"
                #    elif ! __is_main_container_running && ! __is_docker_gen_container_running; then
                #        printf "\033[1;31m%-10s\033[0m" "stopped"
                #    fi
                elif [ ${result} -eq 0 ]; then
                    if __is_container_running ${app_name}; then
                        printf "\033[1;32m%-10s\033[0m" "running"
                    else
                        printf "\033[1;31m%-10s\033[0m" "stopped"
                    fi
                fi
                printf "\n"
                        
            elif [ ${app_name} = 'grafana' ]; then
                __is_container_exist ${influxdb_container}; local exist_influxdb=$?

            elif [ ${app_name} = 'wordpress' ] ||   \
                    [ ${app_name} = 'owncloud' ] || \
                    [ ${app_name} = 'lychee' ] ||   \
                    [ ${app_name} = 'monitor' ] ||  \
                    [ ${app_name} = 'php' ]
                then
                printf "http://%-35s" ${fqdn}
                printf "%-15s" ${app_name}:${app_version}

                main_container=${fqdn}-${app_name}
                db_container=${main_container}-db

                __is_container_exist ${main_container}; local exist_main=$?
                __is_container_exist ${db_container}; local exist_db=$?
                local result=$(expr ${exist_main} + ${exist_db})

                if [ ${result} -eq 2 ]; then
                    printf "%-10s" "removed"
                elif [ ${result} -eq 1 ]; then
                    printf "\033[1;31m%-10s\033[0m" "error"
                elif [ ${result} -eq 0 ]; then
                    if __is_container_running ${main_container} && __is_container_running ${db_container}; then
                        printf "\033[1;32m%-10s\033[0m" "running"
                    elif ! __is_container_running ${main_container} && __is_container_running ${db_container}; then
                        printf "%-10s" "error: Main container is down"
                    elif __is_container_running ${main_container} && ! __is_container_running ${db_container}; then
                        printf "%-10s" "error: DB container is down"
                    elif !  __is_container_running ${main_container} && ! __is_container_running ${db_container}; then
                        printf "\033[1;31m%-10s\033[0m" "stopped"
                    fi
                fi
                printf "\n"
            fi
        done
    fi
}

# ----------------------------------------
# Public Functions
# ----------------------------------------

function _up(){
    local exist=''
    if [ -f ${applist} ]; then
        exist=$(cat ${applist} | grep ${fqdn})
        if [ -n "${exist}" ]; then
            echo "${project_name}: 'http://${fqdn}' is already used."
            echo "Please try to 'new' command again with -d or -s option."
            exit 1
        fi
    else
        touch ${applist}
    fi
    __up && {
        if [ ${app_name} = 'proxy' ]; then
            new="n/a ${app_name} running #${port}"
        else
            new="${fqdn} ${app_name} running ${app_path}"
        fi
        echo ${new} >> ${applist}
    }
}

function _start() {
    if [ ! -f ${applist} ]; then
        echo "${project_name}: 'http://${fqdn}' does not exist."
        echo "Please try to 'new' command to create '${fqdn}'"
        exit 1
    fi

    cat ${applist} | grep ${fqdn} > /dev/null 2>&1
    if [ $? -ne 0  ]; then
        echo "${project_name}: 'http://${fqdn}' does not exist."
        echo "Please try to 'new' command to create '${fqdn}'"
        exit 1
    fi

    cd ${app_path}/bin

    # when container removed
    if ! __is_main_container_exist; then
        _up

    # when container running
    elif __is_main_container_running; then
        echo ${project_name}: "'http://${fqdn}' is already running"
        exit 1

    # when container stopped
    else
        docker-compose -p ${project_name} start && {
            local old=$(cat ${applist} | grep ${fqdn})
            local new=$(cat ${applist} | grep ${fqdn} | sed -e "s:stopped:running:")
            sed -i -e "s:${old}:${new}:" ${applist}
        }
    fi
}

function _stop() {
    cd ${app_path}/bin
    docker-compose -p ${project_name} stop && {
        if [ -f ${applist} ]; then
            local old=$(cat ${applist} | grep ${fqdn})
            local new=$(cat ${applist} | grep ${fqdn} | sed -e "s:running:stopped:")
            sed -i -e "s:${old}:${new}:" ${applist}
        else
            echo "error@_stop() in toybox"
        fi
    }
}

function _restart() {
    _stop
    _rm
    _start
}


function _rm() {
    if __is_main_container_running; then
        echo ${project_name}: "'http://${fqdn}' is running now."
        echo "Please stop it first.( toybox http://${fqdn} stop )"
        exit 1
    fi

    cd ${app_path}/bin
    echo y | docker-compose -p ${project_name} rm && {
        if [ -f ${applist} ]; then
            old=$(cat ${applist} | grep ${fqdn})
            new=$(cat ${applist} | grep ${fqdn} | sed -e "s:stopped:removed:")
            sed -i -e "s:${old}:${new}:" ${applist}
            #sed -i -e "/${fqdn}/d" ${applist}
        else
            echo "error@_rm() in toybox"
        fi
    }
}

function _clear() {
    if __is_main_container_running; then
        echo ${project_name}: "'http://${fqdn}' is running now."
        echo "Please stop and remove it first.( toybox http://${fqdn} stop )"
        exit 1
    fi
    if __is_main_container_exist; then
        echo ${project_name}: "'http://${fqdn}' is existing now."
        echo "Please remove t first.( toybox http://${fqdn} rm )"
        exit 1
    fi

    sed -i -e "/${fqdn}/d" ${applist}
    sudo rm -rf ${app_path}
}


function _ps() {
    echo ${app_path}
    cd ${app_path}/bin
    docker-compose -p ${project_name} ps
}

#function _backup() {
#    __backup
#}
#
#function _restore() {
#    __restore
#}

# ----------------------------------------
# Main Function
# ----------------------------------------

function __docker_toybox() {
    # Load application module
    if [ -e $TOYBOX_HOME/lib/${app_name}.fnc ]; then
        . $TOYBOX_HOME/lib/${app_name}.fnc
        mkdir -p ${app_path}
    else
        echo "${project_name}: No such application as '${app_name}'"
        exit 1
    fi
    
    # Exec Command
    local command=$1
    if __is_executable "_${command}" ; then
        _${command} $@
    else
        echo "${project_name}: '${command}' is not a ${project_name} command." 
        echo "See '${project_name} -h'." 
        exit 1
    fi
}

function __red() { 
    printf "\033[1;31m%s\033[0m" $1
}
function __green() { 
    printf "\033[1;32m%s\033[0m" $1
}
function __blue() { 
    printf "\033[1;34m%s\033[0m" $1
}

# ----------------------------------------
# Main Routine
# ----------------------------------------

# check components
__is_executable docker || {
    cat <<EOF
toybox: "docker" couldn't be found. Please install or set \$PATH.
See: https://docs.docker.com/installation/#installation
EOF
    exit 1
  }

__is_executable docker-compose || {
    cat <<EOF
toybox: "docker-compose" couldn't be found. Please install or set \$PATH.
See: https://docs.docker.com/compose/install/
EOF
    exit 1
  }

# check $TOYBOX_HOME
if [ -z "$TOYBOX_HOME" ] ; then
    cat <<EOF
toybox: "TOYBOX_HOME" is not set. 
Please set it for your absolute path of the docker-toybox installed directory
e.g. export TOYBOX_HOME=/home/nobita/workspace/docker-toybox
EOF
    exit 1
fi

# check options
while getopts evhs:d: OPT
do
  case $OPT in
    "e" ) __env ; exit 0 ;;
    "v" ) __version ; exit 0 ;;
    "h" ) __help ; exit 0 ;;
    "s" ) sub_domain="${OPTARG}" ;;
    "d" ) domain="${OPTARG}" ;;
  esac
done
shift $(expr $OPTIND - 1)

# check arguments
if [ $# -eq 0 ]; then
    #__list
    __monitor
    exit 0

elif [ $# -ne 2 ]; then
    __usage
    exit 1
fi

# ----------------------------------------
# set variables
# ----------------------------------------

arg=$1; shift

# URL argument
if [[ ${arg} =~ ^http://.* ]]; then
    
    fqdn=$(echo ${arg} | sed "s?http://??")

    if [ ! -f ${applist} ]; then
        echo "${project_name}: No application available."
        echo "Please create application first."
        exit 1
    fi

    app_name="$(cat ${applist} | grep ${fqdn} | awk '{print $2}')"
    app_path="$(cat ${applist} | grep ${fqdn} | awk '{print $4}')"
    compose_file="${app_path}/bin/docker-compose.yml"
    src="$TOYBOX_HOME/src/${app_name}"
    
    if [ ! -n "${app_name}" ] && [ ! -n "${app_path}" ]; then
        echo "${project_name}: 'http://${fqdn}' may be invalid URL."
        exit 1
    fi

# Generic Form
elif [ ${arg} = "proxy" ]; then
    port=80
    app_name=${arg}
    app_path="$TOYBOX_HOME/stack/${app_name}/${port}"
    compose_file="${app_path}/bin/docker-compose.yml"
    src="$TOYBOX_HOME/src/${app_name}"

else
    app_name_temp=${arg}
    app_name=$(echo ${app_name_temp} | cut -d":" -f1)
    app_version=$(echo ${app_name_temp} | cut -d":" -f2)

    # set FQDN
    if [ "${domain}" = '' ]; then
        if [ -z "$TOYBOX_DOMAIN" ] ; then
            domain=docker-toybox.com
        else
            domain=$TOYBOX_DOMAIN
        fi
    fi
    if [ "${sub_domain}" = '' ]; then
        sub_domain=${app_name}
    fi

    fqdn="${sub_domain}.${domain}"
    app_path="$TOYBOX_HOME/stack/${app_name}/${sub_domain}.${domain}"
    compose_file="${app_path}/bin/docker-compose.yml"
    src="$TOYBOX_HOME/src/${app_name}"
   
    if [ $1 != "up" ]; then
        echo ${project_name}": Invalid argument(s)."
        echo "See '${project_name} -h'." 
        exit 1
    fi
fi

__docker_toybox $@

exit 0
