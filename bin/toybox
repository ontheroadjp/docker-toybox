#!/bin/bash

. $TOYBOX_HOME/core/usage.fnc
. $TOYBOX_HOME/core/list.fnc
. $TOYBOX_HOME/core/dockerinfo.fnc

# ----------------------------------------
# Global variables
# ----------------------------------------

project_name="toybox"
version="0.2.0"
default_domain="docker-toybox.com"

app_name=""
fqdn=""
domain=""
sub_domain=""
port=""

application=""
app_path=""
compose_file=""
src=""

timezone=$(date +%Z)

# ----------------------------------------
# Private Functions
# ----------------------------------------

function _env() {
    echo "TOYBOX_HOME: $TOYBOX_HOME"
    echo "TOYBOX_DOMAIN: $TOYBOX_DOMAIN"
}

# ----------------------------------------
# Utilities
# ----------------------------------------

function __is_set_env() {
    env | grep $1 > /dev/null 2>&1;
}

function __is_executable() {
    local command="$1"
    type "${command}" > /dev/null 2>&1
}

function __is_container_exist() {
    #$1 = ${application}
    docker ps -a | grep ${project_name}_${1}_ > /dev/null 2>&1
}

function __is_container_running() {
    #$1 = ${application}
    docker ps -a | grep ${project_name}_${1}_ | grep Up > /dev/null 2>&1
}

function __set_app_env() {
    local key=$1
    local val=$2
    local is_val_exist=0
    if [ -f ${app_path}/bin/.env ]; then
        while read line; do
            if [[ "${line}" =~ "${key}=" ]]; then
                sed -i -e "s:${key}=.*$:${key}=${val}:" ${app_path}/bin/.env
                is_val_exist=1
            fi
        done < ${app_path}/bin/.env
    fi

    if [ ${is_val_exist} -eq 0 ]; then
        echo "${key}=${val}" >> ${app_path}/bin/.env
    fi
}

function __get_app_env() {
    local key=$1
    if [ -f ${app_path}/bin/.env ]; then
        while read line; do
            if [[ "${line}" =~ "${key}=" ]]; then
                echo $(echo ${line} | sed "s:${key}=::")
            fi
        done < ${app_path}/bin/.env
    else
        echo ".env file doesn't exist."
    fi
}

# ----------------------------------------
# Command
# ----------------------------------------

function _new() {
    mkdir -p ${app_path}/bin
    __set_app_env TOYBOX_APP_ID $(echo $$)
    __set_app_env TOYBOX_APPLICATION ${application}
    __init && {
        cd ${app_path}/bin
        docker-compose -p ${project_name} up -d && {
            if __is_executable __post_run; then
                __post_run
            fi
            echo "complete!"
            echo "-------------------------------------------"
            echo "${application} (v${app_version})"
            echo "http://${fqdn}"
            echo "-------------------------------------------"
        }
    }
}

function _start() {
    if [ ${application} = "proxy" ]; then
        _new
    else
        cd ${app_path}/bin

        # when container removed
        if ! __is_container_exist ${fqdn}-${application}; then
            _new

        # when container running
        elif __is_container_running ${fqdn}-${application}; then
            echo ${project_name}: "'http://${fqdn}' is already running"
            exit 1

        # when container stopped
        else
            _new
        fi
    fi
}

function _stop() {
   cd ${app_path}/bin
   docker-compose -p ${project_name} stop
}

function _rm() {
    if __is_container_running ${fqdn}-${application}; then
        echo ${project_name}: "'http://${fqdn}' is running now."
        echo "Please stop it first.( toybox http://${fqdn} stop )"
        exit 1
    fi

    cd ${app_path}/bin
    echo y | docker-compose -p ${project_name} rm
}

function _restart() {
    cd ${app_path}/bin
    docker-compose -p ${project_name} restart
}

function _down() {
    cd ${app_path}/bin
    docker-compose -p ${project_name} down
}


function _clear() {
    if __is_container_running ${fqdn}-${application}; then
        echo ${project_name}: "'http://${fqdn}' is running now."
        echo "Please stop and remove it first.( toybox http://${fqdn} stop )"
        exit 1
    fi
    if __is_container_exist ${fqdn}-${application}; then
        echo ${project_name}: "'http://${fqdn}' is existing now."
        echo "Please remove container(s) first.( ex. toybox http://${fqdn} down )"
        exit 1
    fi

    rm -rf ${app_path}
    if [ $(ls -la $TOYBOX_HOME/stack/${domain} | wc -l) -eq 3 ]; then
        rm -rf $TOYBOX_HOME/stack/${domain}
    fi
}

function _logs() {
    cd ${app_path}/bin
    docker-compose -p ${project_name} logs
}

function _config() {
    cd ${app_path}/bin
    docker-compose -p ${project_name} config
}    

function _ps() {
    cd ${app_path}/bin
    docker-compose -p ${project_name} ps | tee $TOYBOX_HOME/tmp/ps_${fqdn}.txt
}

function _info() {

    local width_col1="30s"

    echo "[General]"
    env_file=${app_path}/bin/.env
    cat ${env_file} | while read line; do
        key=$(echo $(echo ${line} | cut -d "=" -f1) | sed -e "s:^TOYBOX_::" )
        val=$(echo ${line} | cut -d "=" -f2)
        printf "%-${width_col1}" "  $key:"
        printf "%-${width_col1}" "$val"
        printf "\n"
    done;
    printf "%-${width_col1}" "  URL:"
    printf "%-${width_col1}" "http://${fqdn}"
    printf "\n"
    printf "%-${width_col1}" "  Number of container:"
    printf "%-${width_col1}" "${#containers[@]}"
    printf "\n"; echo

    toybox "http://"${fqdn} ps > /dev/null 2>&1
    for ((i=0; i<${#containers[@]}; i++ )); do

        while read line; do
            if [[ ${line} =~ ^${project_name}_${containers[$i]}_ ]]; then
                cmd=$(echo ${line} | cut -d " " -f2)
                state=$(echo ${line} | cut -d " " -f3)
                port=$(echo ${line} | cut -d " " -f4)
                break
            fi
        done < "${TOYBOX_HOME}/tmp/ps_${fqdn}.txt"

        #echo "[Container - toybox_${containers[$i]}_1]"
        echo "[Container]"
        printf "%-${width_col1}" "  Name:"; echo "${project_name}_${containers[$i]}_1"
        #printf "%-${width_col1}" "  Base image:"; echo ${images[$i]}
        #printf "%-${width_col1}" "  Command:"; echo ${cmd}
        printf "%-${width_col1}" "  IP Address:"; echo $(__get_ip ${containers[$i]})
        #printf "%-${width_col1}" "  Port:"; echo ${port}
        #printf "%-${width_col1}" "  State:"; echo ${state}

        tmp=$(echo ${components["toybox_${containers[$i]}_1"]})
        comps=( ${tmp} )
        echo "  Component(s):"
        #printf "%-${width_col1}" "Component(s):"; echo ${tmp}
        for ((n=0; n<${#comps[@]}; n++ )); do
            printf "%-${width_col1}" "    - "${comps[$n]}
            echo "v${component_version[${comps[$n]}]}"
        done

        comps_grep=$(echo ${tmp} | sed "s: : -e :g")
        comps_regix=$(echo ${tmp} | sed 's: :_\\|:g')"_"
        echo "  Variable(s):"
        keys=${!params[@]}; vals=${params[@]}
        for ((n=0; n<${#params[@]}; n++ )); do
            key=$(echo ${keys} | cut -d " " -f$((${n} + 1)))
            val=$(echo ${vals} | cut -d " " -f$((${n} + 1)))
            if echo ${key} | grep -e ${comps_grep} > /dev/null 2>&1; then
                key_print=$(echo ${key} | sed -e "s:${comps_regix}::")
                printf "%-${width_col1}" "    - "${key_print^^}:
                echo ${val}
            fi
        done; echo

    done
}

function _ip() {
    for con in ${containers[@]}; do
        echo "${con}:$(__get_ip ${con})"
    done
}

function __get_ip() {
    container=$1
    __is_container_exist ${container}; local exist=$(( ${exist} + $? ))
    __is_container_running ${container}; local running=$(( ${running} + $? ))
    if [ ${exist} -eq 0 ] && [ ${running} -eq 0 ]; then
        docker inspect -f '{{ .NetworkSettings.IPAddress }}' \
            $(docker ps | grep ${container}_1 | awk '{print $1}')
    else
        echo -n "not running"
    fi
}

function _applications() {
    dir=$TOYBOX_HOME/lib/*
    files=()
    for file in ${dir}; do
        if [ -f ${file} ]; then
            files+=("${file}")
            echo ${file} | grep -v ".*_test.fnc$" | sed -e "s:^$TOYBOX_HOME/lib/::" -e "s:.fnc$::"
        fi
    done
}

# ----------------------------------------
# Main Function
# ----------------------------------------

function __docker_toybox() {

    local command=$1

    # Load application
    if [ -e $TOYBOX_HOME/lib/${application}.fnc ]; then
        . $TOYBOX_HOME/lib/${application}.fnc
    else
        echo "${project_name}: No such application.'"
        exit 1
    fi
    
    # error check
    if ! __is_executable "_${command}" ; then
        echo "${project_name}: '${command}' is not a ${project_name} command." 
        echo "See '${project_name} -h'." 
        exit 1
    elif [ ${command} = "new" ]; then
        if [ -d ${app_path} ] && [ ${application} = "proxy" ]; then
            echo "${project_name}: 'proxy #${port}' is already in used."
            exit 1
        elif [ -d ${app_path} ]; then
            echo "URL \"http://${fqdn}\" is already in used."
            echo "Please try to 'new' command with -s or/and -d option."
            exit 1
        fi
    fi

    # Exec Command
    _${command} $@
}

# ----------------------------------------
# Main Routine
# ----------------------------------------

# check components
__is_executable docker || {
    cat <<EOF
toybox: "docker" command is required.
See: https://docs.docker.com/installation/#installation
EOF
    exit 1
  }

__is_executable docker-compose || {
    cat <<EOF
toybox: "docker-compose" command is required.
See: https://docs.docker.com/compose/install/
EOF
    exit 1
  }

__is_set_env TOYBOX_HOME || {
    cat <<EOF
toybox: enviroment variable "TOYBOX_HOME" is not set. 
Please set it for your absolute path of the docker-toybox installed directory
e.g. export TOYBOX_HOME=/home/nobita/workspace/docker-toybox
EOF
    exit 1
}

# check options
#while getopts s:d: OPT
#do
#  case $OPT in
#    "s" ) sub_domain="${OPTARG}" ;;
#    "d" ) domain="${OPTARG}" ;;
#  esac
#done
#shift $(expr $OPTIND - 1)

#usage() {
#    echo "Usage: $PROGNAME [OPTIONS] FILE"
#    echo "  This script is ~."
#    echo
#    echo "Options:"
#    echo "  -h, --help"
#    echo "      --version"
#    echo "  -a, --long-a ARG"
#    echo "  -b, --long-b [ARG]"
#    echo "  -c, --long-c"
#    echo
#    exit 1
#}
for OPT in "$@"
do
    case "$OPT" in
        '-h'|'--help' )
            __usage
            exit 1
            ;;
        '-v'|'--version' )
            echo ${version}
            exit 1
            ;;
        '-s'|'--sub-domain' )
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "${project_name}: option requires an argument -- $1" 1>&2
                exit 1
            fi
            sub_domain="$2"
            shift 2
            ;;
        '-d'|'--domain' )
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "${project_name}: option requires an argument -- $1" 1>&2
                exit 1
            fi
            domain="$2"
            shift 2
            ;;
        '--name' )
            if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
                echo "${project_name}: option requires an argument -- $1" 1>&2
                exit 1
            fi
            app_name="$2"
            shift 2
            ;;
        #'-b'|'--long-b' )
        #    if [[ -z "$2" ]] || [[ "$2" =~ ^-+ ]]; then
        #        shift
        #    else
        #        shift 2
        #    fi
        #    ;;
        #'-c'|'--long-c' )
        #    shift 1
        #    ;;
        '--'|'-' )
            shift 1
            param+=( "$@" )
            break
            ;;
        -*)
            echo "${project_name}: illegal option -- '$(echo $1 | sed 's/^-*//')'" 1>&2
            exit 1
            ;;
        *)
            if [[ ! -z "$1" ]] && [[ ! "$1" =~ ^-+ ]]; then
                #param=( ${param[@]} "$1" )
                param+=( "$1" )
                shift 1
            fi
            ;;
    esac
done

#if [ -z ${param} ]; then
#    echo "${project_name}: too few arguments" 1>&2
#    echo "Try '${project_name} --help' for more information." 1>&2
#    exit 1
#fi

# check arguments
if [ ${#param[@]} -eq 0 ]; then
    __list

#elif [ ${#param[@]} -eq 1 ]; then
#    #if [ $1 = "reset" ]; then
#    if [ ${param[0]} = "reset" ]; then
#        echo "Are you sure you want to reset all of containers related ${project_name}?(y/n)"
#        read answer
#        if [ ${answer} = "y" ]; then
#            echo -n 'docker stop...'
#            docker stop $(docker ps | grep ${project_name} | awk '{print $1}') > /dev/null 2>&1
#            echo 'done.'
#            echo -n 'docker rm...'
#            docker rm $(docker ps -a | grep ${project_name} | awk '{print $1}') > /dev/null 2>&1
#            echo 'done.'
#            echo -n 'remove stack directory...'
#            sudo rm -rf $TOYBOX_HOME/stack && {
#                echo 'done.'
#            }
#        fi
#    elif __is_executable "_$1" ; then
#        _$1
#    else
#        echo "Invalid argument: $1"
#        exit 1;
#    fi

elif [ ${#param[@]} -eq 2 ]; then

    #arg=$1; shift
    arg=${param[0]}; unset param[0]; param=(${param[@]})
   
    # ----------------------------------------
    # set variables: URL form
    # ----------------------------------------
    if [[ ${arg} =~ ^http://.* ]]; then

        fqdn=$(echo ${arg} | sed "s?http://??")
        sub_domain=$(echo ${fqdn} | cut -d "." -f1)
        domain=$(echo ${fqdn} | sed "s:${sub_domain}\.::")

        app_path="$TOYBOX_HOME/stack/${domain}/${sub_domain}"
        if [ ! -d ${app_path} ]; then
            echo "Invalid URL: http://${fqdn}"
            exit 1
        fi

        application=$(__get_app_env TOYBOX_APPLICATION)
        
    # ----------------------------------------
    # set variables: Generic Form
    # ----------------------------------------
    elif [ ${arg} = "proxy" ]; then
        application=${arg}
        domain=${application}
        sub_domain="80"
        fqdn=${sub_domain}.${domain}
        app_path="$TOYBOX_HOME/stack/${domain}/${sub_domain}"

        #app_path="$TOYBOX_HOME/stack/${application}/${port}"
    else
        application=${arg}

        # set FQDN
        : ${domain:=${TOYBOX_DOMAIN}}
        : ${domain:=${default_domain}}
        : ${sub_domain:=${application}}
        fqdn="${sub_domain}.${domain}"
        app_path="$TOYBOX_HOME/stack/${domain}/${sub_domain}"
    fi

    if [ ! -f $TOYBOX_HOME/lib/${application}.fnc ]; then
       echo "No application available."
       exit 1;
    fi
    
    compose_file="${app_path}/bin/docker-compose.yml"
    src="$TOYBOX_HOME/src/${application}"

    # ----------------------------------------
    # Exec main command
    # ----------------------------------------
    #__docker_toybox $@
    __docker_toybox ${param[@]}
else
    echo "${project_name}: Invalid argument(s)."
    exit 1;
fi

exit 0
